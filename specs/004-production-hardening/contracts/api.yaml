openapi: 3.0.0
info:
  title: Production Hardening API
  version: 1.0.0
  description: API contracts for production hardening, monitoring, and error handling

paths:
  /api/health/system:
    get:
      summary: Get comprehensive system health status
      description: Returns health metrics for all system components
      responses:
        '200':
          description: System health retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [healthy, degraded, unhealthy]
                  timestamp:
                    type: string
                    format: date-time
                  components:
                    type: array
                    items:
                      $ref: '#/components/schemas/HealthMetrics'
                  overall:
                    type: object
                    properties:
                      availability:
                        type: number
                        minimum: 0
                        maximum: 1
                      averageLatency:
                        type: number
                        minimum: 0
                      errorRate:
                        type: number
                        minimum: 0
                        maximum: 1
        '500':
          description: Health check system failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/health/providers:
    get:
      summary: Get LLM provider health status
      description: Returns health and quota information for all LLM providers
      responses:
        '200':
          description: Provider health retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  providers:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          enum: [cerebras, gemini, groq]
                        status:
                          type: string
                          enum: [available, degraded, unavailable]
                        health:
                          $ref: '#/components/schemas/HealthMetrics'
                        quota:
                          type: object
                          properties:
                            used:
                              type: number
                              minimum: 0
                              maximum: 1
                            remaining:
                              type: number
                              minimum: 0
                            resetTime:
                              type: string
                              format: date-time
                required: [name, status, health]

  /api/monitoring/errors:
    post:
      summary: Report application error
      description: Submit error report for tracking and analysis
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorReport'
      responses:
        '201':
          description: Error reported successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  status:
                    type: string
                    enum: [logged, escalated]
        '400':
          description: Invalid error report format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/monitoring/metrics:
    post:
      summary: Submit performance metrics
      description: Record performance metrics for monitoring
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PerformanceMetrics'
      responses:
        '201':
          description: Metrics recorded successfully
        '400':
          description: Invalid metrics format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      summary: Get performance metrics
      description: Retrieve performance metrics for dashboards
      parameters:
        - name: component
          in: query
          schema:
            type: string
            enum: [edge_function, llm_provider, frontend, system]
        - name: timeRange
          in: query
          schema:
            type: string
            enum: [1h, 24h, 7d, 30d]
        - name: aggregation
          in: query
          schema:
            type: string
            enum: [raw, avg, p95, p99]
      responses:
        '200':
          description: Metrics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  metrics:
                    type: array
                    items:
                      $ref: '#/components/schemas/HealthMetrics'
                  aggregation:
                    type: object
                    properties:
                      availability:
                        type: number
                      latency:
                        type: object
                        properties:
                          average:
                            type: number
                          p95:
                            type: number
                          p99:
                            type: number

  /api/security/events:
    post:
      summary: Log security event
      description: Record security-related events for monitoring
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecurityEvent'
      responses:
        '201':
          description: Security event logged successfully
        '400':
          description: Invalid security event format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/validation/input:
    post:
      summary: Validate user input
      description: Validate and sanitize user input before processing
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                field:
                  type: string
                value:
                  type: string
                rules:
                  type: array
                  items:
                    $ref: '#/components/schemas/ValidationRule'
      responses:
        '200':
          description: Input validation completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                  sanitized:
                    type: string
                  errors:
                    type: array
                    items:
                      type: string
                  warnings:
                    type: array
                    items:
                      type: string

components:
  schemas:
    HealthMetrics:
      type: object
      properties:
        id:
          type: string
          format: uuid
        timestamp:
          type: string
          format: date-time
        component:
          type: string
          enum: [edge_function, llm_provider, frontend, system]
        metrics:
          type: object
          properties:
            availability:
              type: number
              minimum: 0
              maximum: 1
            latency:
              type: object
              properties:
                p50:
                  type: number
                  minimum: 0
                p95:
                  type: number
                  minimum: 0
                p99:
                  type: number
                  minimum: 0
            errorRate:
              type: number
              minimum: 0
              maximum: 1
            throughput:
              type: number
              minimum: 0
        provider:
          type: string
          enum: [cerebras, gemini, groq]
        metadata:
          type: object
      required: [id, timestamp, component, metrics]

    ErrorReport:
      type: object
      properties:
        boundaryContext:
          type: object
          properties:
            id:
              type: string
              format: uuid
            component:
              type: string
            errorType:
              type: string
              enum: [ai_service, network, validation, unknown]
            timestamp:
              type: string
              format: date-time
            userAgent:
              type: string
            routePath:
              type: string
            metadata:
              type: object
          required: [id, component, errorType, timestamp, routePath]
        error:
          type: object
          properties:
            name:
              type: string
            message:
              type: string
            stack:
              type: string
            cause:
              type: object
          required: [name, message]
        recovery:
          type: object
          properties:
            attempted:
              type: boolean
            successful:
              type: boolean
            fallbackUsed:
              type: string
          required: [attempted, successful]
        user:
          type: object
          properties:
            sessionId:
              type: string
            actionHistory:
              type: array
              items:
                type: string
          required: [sessionId, actionHistory]
      required: [boundaryContext, error, recovery, user]

    PerformanceMetrics:
      type: object
      properties:
        id:
          type: string
          format: uuid
        timestamp:
          type: string
          format: date-time
        page:
          type: string
        metrics:
          type: object
          properties:
            fcp:
              type: number
              minimum: 0
            lcp:
              type: number
              minimum: 0
            fid:
              type: number
              minimum: 0
            cls:
              type: number
              minimum: 0
            ttfb:
              type: number
              minimum: 0
          required: [fcp, lcp, fid, cls, ttfb]
        device:
          type: object
          properties:
            type:
              type: string
              enum: [mobile, tablet, desktop]
            connection:
              type: string
              enum: [slow-2g, 2g, 3g, 4g, wifi]
          required: [type, connection]
        bundleSize:
          type: object
          properties:
            initial:
              type: number
              minimum: 0
            total:
              type: number
              minimum: 0
            chunks:
              type: object
          required: [initial, total]
      required: [id, timestamp, page, metrics, device, bundleSize]

    SecurityEvent:
      type: object
      properties:
        id:
          type: string
          format: uuid
        timestamp:
          type: string
          format: date-time
        type:
          type: string
          enum: [rate_limit_exceeded, invalid_input, suspicious_activity, auth_failure]
        source:
          type: object
          properties:
            ip:
              type: string
              format: ipv4
            userAgent:
              type: string
            sessionId:
              type: string
          required: [ip, userAgent]
        details:
          type: object
          properties:
            endpoint:
              type: string
            payload:
              type: object
            response:
              type: string
            action:
              type: string
              enum: [blocked, logged, rate_limited]
          required: [endpoint, response, action]
        risk:
          type: string
          enum: [low, medium, high, critical]
      required: [id, timestamp, type, source, details, risk]

    ValidationRule:
      type: object
      properties:
        type:
          type: string
          enum: [required, email, min_length, max_length, pattern, custom]
        value:
          type: string
        message:
          type: string
        severity:
          type: string
          enum: [error, warning]
      required: [type, message, severity]

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        code:
          type: string
        timestamp:
          type: string
          format: date-time
        requestId:
          type: string
          format: uuid
      required: [error, message, timestamp]
