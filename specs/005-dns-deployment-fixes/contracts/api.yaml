openapi: 3.0.3
info:
  title: Hylo DNS & Deployment API
  description: API contracts for DNS verification and deployment monitoring
  version: 1.0.0
  contact:
    name: Hylo Development Team

servers:
  - url: https://hylo-app.vercel.app/api
    description: Production API
  - url: https://hylo-app-git-005-dns-deployment-fixes.vercel.app/api
    description: Feature branch API

paths:
  /dns/verify:
    post:
      summary: Verify DNS propagation for a domain
      description: |
        Initiates DNS verification process for a deployed domain. 
        Returns immediately with verification ID for polling status.
      operationId: verifyDNS
      tags:
        - DNS Verification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DNSVerificationRequest'
            examples:
              basic:
                summary: Basic domain verification
                value:
                  domain: 'hylo-app.vercel.app'
                  recordType: 'A'
                  timeout: 900000
                  retryInterval: 30000
                  maxRetries: 30
      responses:
        '202':
          description: Verification initiated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DNSVerificationInitiated'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /dns/verify/{verificationId}:
    get:
      summary: Get DNS verification status
      description: Poll the status of an ongoing DNS verification
      operationId: getDNSVerificationStatus
      tags:
        - DNS Verification
      parameters:
        - name: verificationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Verification status retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DNSVerificationResponse'
        '404':
          description: Verification not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /providers/status:
    get:
      summary: Get provider status summary
      description: |
        Returns current status of all LLM providers including health,
        availability, and capacity information
      operationId: getProviderStatus
      tags:
        - Provider Status
      responses:
        '200':
          description: Provider status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderStatusResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /providers/{providerId}/status:
    get:
      summary: Get detailed status for specific provider
      description: Returns comprehensive status information for a single provider
      operationId: getProviderDetailedStatus
      tags:
        - Provider Status
      parameters:
        - name: providerId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ProviderName'
      responses:
        '200':
          description: Detailed provider status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedProviderStatus'
        '404':
          description: Provider not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /deployment/events:
    get:
      summary: Get deployment events
      description: Retrieve recent deployment events with filtering options
      operationId: getDeploymentEvents
      tags:
        - Deployment Monitoring
      parameters:
        - name: branch
          in: query
          schema:
            type: string
          description: Filter by branch name
        - name: environment
          in: query
          schema:
            type: string
            enum: [preview, production]
          description: Filter by environment
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Maximum number of events to return
      responses:
        '200':
          description: Deployment events retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  events:
                    type: array
                    items:
                      $ref: '#/components/schemas/DeploymentEvent'
                  total:
                    type: integer
                  hasMore:
                    type: boolean

  /deployment/{deploymentId}/status:
    get:
      summary: Get deployment status
      description: Get comprehensive status for a specific deployment
      operationId: getDeploymentStatus
      tags:
        - Deployment Monitoring
      parameters:
        - name: deploymentId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Deployment status retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentSummary'
        '404':
          description: Deployment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /health/comprehensive:
    get:
      summary: Comprehensive health check
      description: |
        Performs comprehensive health check including DNS resolution,
        provider availability, and deployment status
      operationId: getComprehensiveHealth
      tags:
        - Health Monitoring
      responses:
        '200':
          description: Health check completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  healthy:
                    type: boolean
                  timestamp:
                    type: string
                    format: date-time
                  dns:
                    $ref: '#/components/schemas/DNSVerificationResponse'
                  providers:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProviderHealthCheck'
                  deployment:
                    $ref: '#/components/schemas/DeploymentSummary'

components:
  schemas:
    DNSVerificationRequest:
      type: object
      required:
        - domain
        - recordType
        - timeout
        - retryInterval
        - maxRetries
      properties:
        domain:
          type: string
          format: hostname
          example: 'hylo-app.vercel.app'
        expectedIP:
          type: string
          format: ipv4
          example: '76.76.19.26'
        recordType:
          type: string
          enum: [A, AAAA, CNAME]
          example: 'A'
        timeout:
          type: integer
          minimum: 60000
          maximum: 1800000
          example: 900000
          description: Timeout in milliseconds
        retryInterval:
          type: integer
          minimum: 10000
          maximum: 300000
          example: 30000
          description: Retry interval in milliseconds
        maxRetries:
          type: integer
          minimum: 1
          maximum: 100
          example: 30

    DNSVerificationInitiated:
      type: object
      required:
        - verificationId
        - status
        - estimatedCompletion
      properties:
        verificationId:
          type: string
          format: uuid
        status:
          type: string
          enum: [pending]
        estimatedCompletion:
          type: string
          format: date-time

    DNSVerificationResponse:
      type: object
      required:
        - domain
        - verified
        - recordType
        - propagationTime
        - attempts
        - timestamp
      properties:
        domain:
          type: string
          format: hostname
        verified:
          type: boolean
        recordType:
          type: string
          enum: [A, AAAA, CNAME]
        resolvedValue:
          type: string
          nullable: true
        propagationTime:
          type: integer
          description: Time taken in milliseconds
        attempts:
          type: integer
        timestamp:
          type: string
          format: date-time
        error:
          type: string
          nullable: true

    ProviderName:
      type: string
      enum: [cerebras, gemini, groq]

    SimpleProviderStatus:
      type: string
      enum: [available, degraded, unavailable, maintenance]

    DetailedProviderStatus:
      type: object
      required:
        - provider
        - isEnabled
        - isHealthy
        - isAvailable
        - hasCapacity
        - keys
        - activeKeyId
        - metrics
        - rateLimits
        - lastHealthCheck
        - nextQuotaReset
      properties:
        provider:
          $ref: '#/components/schemas/ProviderName'
        isEnabled:
          type: boolean
        isHealthy:
          type: boolean
        isAvailable:
          type: boolean
        hasCapacity:
          type: boolean
        keys:
          type: array
          items:
            $ref: '#/components/schemas/KeyStatus'
        activeKeyId:
          type: string
        metrics:
          $ref: '#/components/schemas/ProviderMetrics'
        rateLimits:
          $ref: '#/components/schemas/RateLimitStatus'
        lastHealthCheck:
          type: integer
          description: Unix timestamp
        nextQuotaReset:
          type: integer
          description: Unix timestamp

    KeyStatus:
      type: object
      required:
        - keyId
        - type
        - isActive
        - quotaUsed
        - quotaLimit
        - quotaResetTime
        - lastUsed
        - errorCount
        - successRate
        - avgLatency
      properties:
        keyId:
          type: string
        type:
          type: string
          enum: [primary, secondary, tertiary]
        isActive:
          type: boolean
        quotaUsed:
          type: integer
        quotaLimit:
          type: integer
        quotaResetTime:
          type: integer
          description: Unix timestamp
        lastUsed:
          type: integer
          description: Unix timestamp
        errorCount:
          type: integer
        successRate:
          type: number
          format: float
          minimum: 0
          maximum: 1
        avgLatency:
          type: number
          format: float
          description: Average latency in milliseconds

    ProviderMetrics:
      type: object
      required:
        - totalRequests
        - successfulRequests
        - failedRequests
        - avgLatency
        - totalCost
        - tokensUsed
      properties:
        totalRequests:
          type: integer
        successfulRequests:
          type: integer
        failedRequests:
          type: integer
        avgLatency:
          type: number
          format: float
        totalCost:
          type: number
          format: float
        tokensUsed:
          type: integer

    RateLimitStatus:
      type: object
      required:
        - requestsPerMinute
        - currentRpm
        - tokensPerMinute
        - currentTpm
      properties:
        requestsPerMinute:
          type: integer
        currentRpm:
          type: integer
        tokensPerMinute:
          type: integer
        currentTpm:
          type: integer

    ProviderStatusResponse:
      type: object
      required:
        - providers
        - timestamp
        - healthy
      properties:
        providers:
          type: array
          items:
            type: object
            required:
              - name
              - status
              - isHealthy
            properties:
              name:
                $ref: '#/components/schemas/ProviderName'
              status:
                $ref: '#/components/schemas/SimpleProviderStatus'
              isHealthy:
                type: boolean
              lastChecked:
                type: string
                format: date-time
        timestamp:
          type: string
          format: date-time
        healthy:
          type: boolean
          description: True if at least one provider is available

    ProviderHealthCheck:
      type: object
      required:
        - providerId
        - checkType
        - result
        - timestamp
      properties:
        providerId:
          $ref: '#/components/schemas/ProviderName'
        checkType:
          type: string
          enum: [availability, capacity, latency, error_rate]
        result:
          type: boolean
        value:
          type: number
          format: float
        threshold:
          type: number
          format: float
        timestamp:
          type: integer
          description: Unix timestamp
        metadata:
          type: object
          additionalProperties: true

    DeploymentEvent:
      type: object
      required:
        - id
        - type
        - timestamp
        - branch
        - commitSha
        - environment
      properties:
        id:
          type: string
        type:
          type: string
          enum: [started, built, deployed, dns_verified, completed, failed]
        timestamp:
          type: string
          format: date-time
        branch:
          type: string
        commitSha:
          type: string
          pattern: '^[a-f0-9]{40}$'
        environment:
          type: string
          enum: [preview, production]
        url:
          type: string
          format: uri
        duration:
          type: integer
          description: Duration in milliseconds
        error:
          $ref: '#/components/schemas/DeploymentError'

    DeploymentError:
      type: object
      required:
        - code
        - message
        - category
        - retryable
      properties:
        code:
          type: string
        message:
          type: string
        category:
          type: string
          enum: [build, deploy, dns, verification, timeout]
        retryable:
          type: boolean
        context:
          type: object
          additionalProperties: true

    DeploymentSummary:
      type: object
      required:
        - id
        - status
        - branch
        - environment
        - startTime
        - dnsStatus
        - healthChecks
      properties:
        id:
          type: string
        status:
          type: string
          enum: [pending, building, deploying, verifying, ready, error]
        branch:
          type: string
        environment:
          type: string
          enum: [preview, production]
        startTime:
          type: string
          format: date-time
        completionTime:
          type: string
          format: date-time
        duration:
          type: integer
          description: Duration in milliseconds
        url:
          type: string
          format: uri
        dnsStatus:
          type: string
          enum: [pending, propagating, verified, failed, timeout]
        healthChecks:
          type: array
          items:
            $ref: '#/components/schemas/ProviderHealthCheck'

    Error:
      type: object
      required:
        - error
        - message
        - timestamp
      properties:
        error:
          type: string
        message:
          type: string
        code:
          type: string
        details:
          type: object
          additionalProperties: true
        timestamp:
          type: string
          format: date-time

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: []

tags:
  - name: DNS Verification
    description: DNS propagation verification endpoints
  - name: Provider Status
    description: LLM provider health and status monitoring
  - name: Deployment Monitoring
    description: Deployment event tracking and status
  - name: Health Monitoring
    description: Comprehensive application health checks
