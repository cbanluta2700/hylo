/**
 * Get Itinerary Results API Endpoint
 * Following constitutional rule: Edge-First Architecture - Web APIs only
 */

export const config = {
  runtime: 'edge',
};

export default async function handler(request: Request): Promise<Response> {
  console.log('üîç [Get-Itinerary] Handler called', {
    method: request.method,
    url: request.url,
  });

  if (request.method !== 'GET') {
    return Response.json({ success: false, error: 'Method not allowed' }, { status: 405 });
  }

  const startTime = Date.now();

  try {
    const url = new URL(request.url);
    const workflowId = url.searchParams.get('workflowId');

    console.log('üîç [Get-Itinerary] WorkflowId:', workflowId);

    if (!workflowId) {
      return Response.json(
        { success: false, error: 'workflowId parameter is required' },
        { status: 400 }
      );
    }

    console.log(`üîç [Get-Itinerary] Checking status for workflow: ${workflowId}`);

    // For now, return a simple response to test deployment
    // TODO: Integrate with sessionManager once deployment is confirmed
    return Response.json({
      success: false,
      workflowId,
      status: 'processing',
      progress: 25,
      currentStage: 'architect',
      message: 'AI workflow is still processing... (Endpoint deployed successfully)',
      timestamp: new Date().toISOString(),
      processingTime: Date.now() - startTime,
    });
  } catch (error) {
    console.error(`üí• [Get-Itinerary] Error:`, error);
    return Response.json(
      {
        success: false,
        error: 'Internal server error',
        processingTime: Date.now() - startTime,
      },
      { status: 500 }
    );
  }
}

/**
 * HTTP method exports for Vercel
 */
export async function GET(request: Request) {
  return handler(request);
}

export async function OPTIONS(request: Request) {
  return new Response(null, {
    status: 200,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type',
    },
  });
}
